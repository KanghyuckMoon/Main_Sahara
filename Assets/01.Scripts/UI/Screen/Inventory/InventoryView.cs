using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UIElements;
using System.Linq;
using System;
using UI.ConstructorManager;
using UI.Production;
using Inventory;
using Utill.Addressable;

namespace UI.Inventory
{
   
    [Serializable]
    public class InventoryView : AbUI_Base
    {
        #region enum
        public enum InvenPanelElements
        {
            // 패널들만 넣어야해 
            weapon_panel,
            armor_panel,
            consumation_panel,
            skill_panel, 
            accessories_panel, 
            material_panel, 
            valuable_panel 
        }

        enum Elements
        {
            // 패널 다음 인덱스부터 시작 
            right_content_panel = 7, // 퀵슬롯
            drag_item,
            armor_equip_panel, // 장비 장착
            accessoire_equip_panel, // 장신구 장착
            skill_equip_panel, // 스킬 장착 
           

        }

        enum RadioButtons
        {
            weapon_button,
            armor_button,
            consumation_button,
            skill_button,
            accessories_button,
            material_button,
            valuable_button
            //장비
            //소비
            //기타
        }

        enum ScrollViews
        {
            inventory_scroll_panel
        }
        #endregion
        private InvenItemUISO invenItemUISO;    

        private List<VisualElement> inventoryPanelList = new List<VisualElement>();
        private Dictionary<ItemType, InventoryPanelUI> itemSlotDic = new Dictionary<ItemType, InventoryPanelUI>();

        private InvenPanelElements curPanelType; // 현재 활성화중인 패널 

        private SlotItemView dragItemView; // 드래그앤 드랍시 활성화될 뷰 

        // 프로퍼티
        private VisualElement DragItem => GetVisualElement((int)Elements.drag_item);
        public override void Cashing()
        {
            base.Cashing();
            BindVisualElements(typeof(InvenPanelElements));
            BindVisualElements(typeof(Elements));
            BindRadioButtons(typeof(RadioButtons));
            BindScrollViews(typeof(ScrollViews));
        }

        public override void Init()
        {
            base.Init();

            // 드래그 아이템 초기화 
            dragItemView = new SlotItemView();
            VisualElement _v = GetVisualElement((int)Elements.drag_item); 
            dragItemView.InitUIParent(_v);
            dragItemView.Cashing();
            dragItemView.Init();
            dragItemView.AddDropper(() => DropItem()); ;

            // SO 불러오기 
            invenItemUISO = AddressablesManager.Instance.GetResource<InvenItemUISO>("InvenItemUISO");
            // 슬롯 생성 
            CreateAllSlots();
            // 인벤토리 패널 리스트에 넣고 weapon패널만 활성화 
            InitPanelList(); 
            // 버튼 이벤트 추가 
            AddButtonEvents();
            //    ItemTypeList.Add()

            InitEquipSlots(); 
        }

        /// <summary>
        /// 퀵 슬롯UI에 데이터 넣기 
        /// </summary>
        public void UpdateQuickSlotUI(ItemData _itemData, int _index)
        {
            itemSlotDic[ItemType.Weapon].SetEquipItemDataUI(_itemData, _index); 
        }

        /// <summary>
        /// 인벤토리 슬롯UI에 데이터 넣기 
        /// </summary>
        /// <param name="_itemData"></param>
        public void UpdateInventoryUI(ItemData _itemData)
        {
            // 셀 수 있는건지 체크 
            // 타입 체크 
            // 슬롯 하나씩 가져와서 데이터 넣기 
            // 슬롯 개수 초과하면 한 줄 더 생성 
            // row 초과인데 데이터 없으면 삭제 

            // 슬롯에 순서대로 
            InventoryPanelUI _ui = itemSlotDic[_itemData.itemType];
            if (_ui.slotItemViewList.Count <= _ui.index)
            {
                CreateRow(invenItemUISO.GetItemUIType(_itemData.itemType));
            }else if(_ui.slotItemViewList.Count > _row * _col) // 기본 인벤토리보다 더 많은데 아이템이 있는 것도 아니면 
            {
                //_ui.RemoveSlotView(); 
            }
            _ui.SetItemDataUI(_itemData);
            
        }

        /// <summary>
        /// 버튼 이벤트 추가
        /// </summary>
        private void AddButtonEvents()
        {
            // 패널 활성화 
            foreach(var _p in Enum.GetValues(typeof(InvenPanelElements)))
            {
                AddRadioBtnChangedEvent((int)_p, (x) => ActiveInventoryPanel((InvenPanelElements)_p,x));
            }
        }

        /// <summary>
        /// 인벤토리 패널 활성화or비활성화 시키기 
        /// </summary>
        /// <param name="_elementType"></param>
        private void ActiveInventoryPanel(InvenPanelElements _elementType,bool _isActive)
        {
            // 바뀌었으면 
            if(curPanelType != _elementType)
            {
                // 스크롤 초기화 
                curPanelType = _elementType;
                GetScrollView((int)ScrollViews.inventory_scroll_panel).scrollOffset = Vector2.zero; 
            }
            if(_elementType == InvenPanelElements.weapon_panel || _elementType == InvenPanelElements.consumation_panel)
            {
                ShowVisualElement(GetVisualElement((int)Elements.right_content_panel), _isActive);
            }
            else if (_elementType == InvenPanelElements.skill_panel)
            {
                ShowVisualElement(GetVisualElement((int)Elements.skill_equip_panel), _isActive);
            }
            else if (_elementType == InvenPanelElements.armor_panel)
            {
                ShowVisualElement(GetVisualElement((int)Elements.armor_equip_panel), _isActive);
            }
            else if (_elementType == InvenPanelElements.accessories_panel)
            {
                ShowVisualElement(GetVisualElement((int)Elements.accessoire_equip_panel), _isActive);
            }

            VisualElement _v = GetVisualElement((int)_elementType);
            ShowVisualElement(_v, _isActive);
        }

        private void InitEquipSlots()
        {
            List<VisualElement> _list = GetVisualElement((int)Elements.right_content_panel).Query<VisualElement>(className: "quick_slot").ToList();
            for (int i = 0; i < _list.Count(); i++)
            {
                itemSlotDic[ItemType.Weapon].AddEquipSlotView(new SlotItemView(_list[i],i)); 
            }
        }

        /// <summary>
        /// 인벤토리 패널 리스트에 넣기 (초기화)
        /// </summary>
        private void InitPanelList()
        {
            inventoryPanelList.Clear();

            // 인벤토리 패널 리스트에 추가 
            foreach (var _p in Enum.GetValues(typeof(InvenPanelElements)))
            {
                inventoryPanelList.Add(GetVisualElement((int)_p));
            }

            // weapon 패널만 활성화 후 나머진 비활성화 
            for (int i = 0; i < inventoryPanelList.Count; i++)
            {
                if (i == (int)InvenPanelElements.weapon_panel)
                {
                    GetVisualElement(i).style.display = DisplayStyle.Flex;
                    continue;
                }
                GetVisualElement(i).style.display = DisplayStyle.None;
            }
        }



        private int _row = 4, _col = 4;

        /// <summary>
        /// 모든 패널마다 슬롯 생성 
        /// </summary>
        private void CreateAllSlots()
        {
            itemSlotDic.Clear();
            foreach (var _v in Enum.GetValues(typeof(InvenPanelElements)))
            {
                itemSlotDic.Add(invenItemUISO.GetItemType((InvenPanelElements)_v), new InventoryPanelUI()); 
                for (int j = 0; j < _row; j++)
                {
                    CreateRow((InvenPanelElements)_v);
                }
            }
        }

        /// <summary>
        /// 슬롯 한 줄 생성 
        /// </summary>
        private void CreateRow(InvenPanelElements _itemType)
        {
            for (int i = 0; i < _col; i++)
            {
                (VisualElement, AbUI_Base) _v = UIConstructorManager.Instance.GetProductionUI(typeof(SlotItemView));
                ItemType _i = invenItemUISO.GetItemType(_itemType);

                SlotItemView _slotView = _v.Item2 as SlotItemView;
                _slotView.AddDragger(dragItemView.Item, () => ClickItem(_slotView)); 
                itemSlotDic[_i].AddSlotView(_v.Item2 as SlotItemView);
                SetParent(_itemType,_v.Item1); 
            }
        }

        /// <summary>
        /// 아이템 드래그 드랍시 밑에 스르롯 체크함수 
        /// </summary>
        private void DropItem()
        {
            // 떨어뜨린 곳이 슬롯이 있는지 체크 
            VisualElement _v = GetVisualElement((int)Elements.drag_item);

           IEnumerable<SlotItemView> slots = itemSlotDic[invenItemUISO.GetItemType(curPanelType)].equipItemViewList.
                                                                    Where((x) => x.Item.worldBound.Overlaps(dragItemView.Item.worldBound));
            
            // 슬롯에 드랍 했다면
            if(slots.Count() != 0)
            {
                // 가장 가깝게 드랍한 슬롯 
                SlotItemView _closedSlot = slots.OrderBy(x => Vector2.Distance(x.Item.worldBound.position, dragItemView.Item.worldBound.position)).First();

                _closedSlot.SetSprite(dragItemView.ItemSprite);
                _closedSlot.IsStackable = dragItemView.IsStackable; 
                _closedSlot.SetText(dragItemView.ItemCount);

                // SO 데이터도 
                //InventoryManager.Instance.SetQuickSlotItem(_closedSlot,_closedSlot.Index);
            }
            else
            {

            }
            ActiveDragItem(false); 
        }

        private void ClickItem(SlotItemView _slotView)
        {
            //dragItemView 에 클릭한 슬롯의 아이템 넘겨주기 
            dragItemView.SetSpriteAndText(_slotView.ItemSprite, _slotView.ItemCount);

            ActiveDragItem(true); 
        }
        private void ActiveDragItem(bool _isActive)
        {
            ShowVisualElement(GetVisualElement((int)Elements.drag_item), _isActive);
        }
        /// <summary>
        /// 특정 인벤토리 창에 슬롯 생성 
        /// </summary>
        /// <param name="_itemType"></param>
        /// <param name="_v"></param>
        private void SetParent(InvenPanelElements _itemType,VisualElement _v)
        {
            GetVisualElement((int)_itemType).Add(_v); 
        }

     //   private void 
    }
}

